#' Compress and checksum the \code{DATA_options("new_data_path")}
#'
#' Compress all files in \code{DATA_options("new_data_path")} into the directory \code{"NEW_DATA_PATH/../archive"}
#'
#' @param compression which compression should be used for the archive. Thge following values are supported at the moment:
#' \describe{
#'    \item{\code{"none"}}{copy the to be imported data folder into archive}
#'    \item{\code{"tar"}}{tar the to be imported data folder}
#'    \item{\code{"tar.gz"}}{tar and gz compress the to be imported data folder}
#' }
#' Default is the value as defined in the config file.
#'
#' @param get_tts if \code{TRUE}, a Trusted Time Stamp will be obtained from OriginStamp
#'
#' @return invisibly returns the name of the archivefile
#' @importFrom openssl sha256
#' @importFrom utils tar
#' @importFrom yaml write_yaml
#'
#' @export
#'
#' @examples
#' \dontrun{
#' run_archive(
#'   compression = "tar",
#'   get_tts = TRUE
#' )
#' }
run_archive <- function(
  compression = DATA_options("archive_compression"),
  get_tts = DATA_options("tts")
){
  ##
  oldwd <- getwd()
  on.exit(
    setwd(oldwd)
  )
  ##
  getTTS <- function(hash, archivename, archivefile) {
    if (get_tts) {
      information <- DATA_options("tts_info")
      information$archivename <- archivename
      DATA_options("tts_info" = information)
      #
      ROriginStamp::store_hash(
        hash = hash,
        error_on_fail = TRUE,
        information = information
      )
      ROriginStamp::get_hash_info(
        hash,
        file = paste0( archivefile, ".OriginStamp.hash-info.yml")
      )
    }
  }
  ##
  if (!(compression %in% c("none", "tar", "tar.gz"))) {
    stop("Conmpression", compression, "not supported!")
  }
  to_be_imported <-  DATA_options("to_be_imported")
  if (
    !file.exists( file.path( to_be_imported, "file.sha256") ) |
    !file.exists( file.path( to_be_imported, "dir.sha256") )
  ) {
    stop("The new data has not been hashed - please run `hash_new_data() before running this command!")
  }
  ##
  archivepath <- DATA_options("archive")
  timestamp <- Sys.time()
  timestamp <- format( timestamp , "%Y-%m-%d--%H-%M-%S")
  archivename <- paste(
    DATA_options("archive_name"),
    timestamp,
    compression,
    sep = "."
  )
  if (compression == "none") {
    gsub( ".none", "", archivename)
  }
  archivefile <- file.path(archivepath, archivename)
  ##
  switch(
    compression,
    tar = {
      oldwd <- setwd(DATA_options("to_be_imported"))
      utils::tar(
        tarfile = archivefile,
        files = "./",
      )
      setwd(oldwd)
      f <- file( archivefile, open = "rb" )
      hash <- as.character( openssl::sha256( f ) )
      close(f)
      rm(f)
      hashln <- paste(hash, archivename, sep = "  ")
      f <- file( file.path(archivepath, paste0(archivename, ".sha256") ) )
      writeLines(
        text = hashln,
        con = f
      )
      close(f)
      rm(f)
      ##
      getTTS(
        hash = hash,
        archivename = archivename,
        archivefile = archivefile
      )
    },
    tar.gz = {
      oldwd <- setwd(DATA_options("to_be_imported"))
      utils::tar(
        tarfile = archivefile,
        files = "./",
        compression = "gz",
        compression_level = 9
      )
      setwd(oldwd)
      f <- file( archivefile, open = "rb" )
      hash <- as.character( openssl::sha256( f ) )
      close(f)
      rm(f)
      hashln <- paste(hash, archivename, sep = "  ")
      f <- file( file.path(archivepath, paste0(archivename, ".sha256") ) )
      writeLines(
        text = hashln,
        con = f
      )
      close(f)
      rm(f)
      ##
      ##
      getTTS(
        hash = hash,
        archivename = archivename,
        archivefile = archivefile
      )
    },
    none = {
      dir.create( archivefile )
      file.copy(
        from = file.path( DATA_options("to_be_imported"), "." ),
        to = archivefile,
        recursive = TRUE,
        copy.date = TRUE
      )
      ##
      information <- DATA_options("tts_info")
      information$archivename <- archivefile
      #
      hash <- read_new_data_hash(file = "file.sha256", hash_file = "dir.sha256")
      ##
      getTTS(
        hash = hash,
        archivename = archivename,
        archivefile = archivefile
      )
    }
  )


# Extract Metadata and store in file --------------------------------------

  metadata <- list(
    data_package_name = basename( archivefile ),
    data_package_hash = hash,
    tts = DATA_options("tts"),
    tts_info = DATA_options("tts_info")
  )
  yaml::write_yaml(
    x = metadata,
    file = paste0(archivefile, ".metadata.yml")
  )


  invisible(archivefile)
}
